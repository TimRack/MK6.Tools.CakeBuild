// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace MK6.MicroServices.ReportTemplates {

  /// <summary>Holder for reflection information generated from messages.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class MessagesReflection {

    #region Descriptor
    /// <summary>File descriptor for messages.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MessagesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5tZXNzYWdlcy5wcm90bxIhTUs2Lk1pY3JvU2VydmljZXMuUmVwb3J0VGVt",
            "cGxhdGVzIuIBCgxSZXBvcnRGb2xkZXISDgoGcGFyZW50GAEgASgFEg4KBnJl",
            "cG9ydBgCIAEoBRITCgtyZXBvcnRfbmFtZRgDIAEoCRITCgtyZXBvcnRfZGVz",
            "YxgEIAEoCRIUCgxyZXBvcnRfbGV2ZWwYBSABKAUSFwoPcmVwb3J0X3NlcXVl",
            "bmNlGAYgASgFEhcKD2ZvbGRlcl9zZXF1ZW5jZRgHIAEoBRJACgdmb2xkZXJz",
            "GAggAygLMi8uTUs2Lk1pY3JvU2VydmljZXMuUmVwb3J0VGVtcGxhdGVzLlJl",
            "cG9ydEZvbGRlciIUChJSZXBvcnRMZXZlbFJlcXVlc3QicwoLUmVwb3J0TGV2",
            "ZWwSDQoFbGV2ZWwYASABKAUSEwoLZGVzY3JpcHRpb24YAiABKAkSQAoHZm9s",
            "ZGVycxgDIAMoCzIvLk1LNi5NaWNyb1NlcnZpY2VzLlJlcG9ydFRlbXBsYXRl",
            "cy5SZXBvcnRGb2xkZXIiKAoTUmVwb3J0Rm9sZGVyUmVxdWVzdBIRCglncm91",
            "cF9pZHMYASADKAViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::MK6.MicroServices.ReportTemplates.ReportFolder), global::MK6.MicroServices.ReportTemplates.ReportFolder.Parser, new[]{ "Parent", "Report", "ReportName", "ReportDesc", "ReportLevel", "ReportSequence", "FolderSequence", "Folders" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MK6.MicroServices.ReportTemplates.ReportLevelRequest), global::MK6.MicroServices.ReportTemplates.ReportLevelRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MK6.MicroServices.ReportTemplates.ReportLevel), global::MK6.MicroServices.ReportTemplates.ReportLevel.Parser, new[]{ "Level", "Description", "Folders" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MK6.MicroServices.ReportTemplates.ReportFolderRequest), global::MK6.MicroServices.ReportTemplates.ReportFolderRequest.Parser, new[]{ "GroupIds" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ReportFolder : pb::IMessage<ReportFolder> {
    private static readonly pb::MessageParser<ReportFolder> _parser = new pb::MessageParser<ReportFolder>(() => new ReportFolder());
    public static pb::MessageParser<ReportFolder> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::MK6.MicroServices.ReportTemplates.MessagesReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public ReportFolder() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ReportFolder(ReportFolder other) : this() {
      parent_ = other.parent_;
      report_ = other.report_;
      reportName_ = other.reportName_;
      reportDesc_ = other.reportDesc_;
      reportLevel_ = other.reportLevel_;
      reportSequence_ = other.reportSequence_;
      folderSequence_ = other.folderSequence_;
      folders_ = other.folders_.Clone();
    }

    public ReportFolder Clone() {
      return new ReportFolder(this);
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 1;
    private int parent_;
    public int Parent {
      get { return parent_; }
      set {
        parent_ = value;
      }
    }

    /// <summary>Field number for the "report" field.</summary>
    public const int ReportFieldNumber = 2;
    private int report_;
    public int Report {
      get { return report_; }
      set {
        report_ = value;
      }
    }

    /// <summary>Field number for the "report_name" field.</summary>
    public const int ReportNameFieldNumber = 3;
    private string reportName_ = "";
    public string ReportName {
      get { return reportName_; }
      set {
        reportName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "report_desc" field.</summary>
    public const int ReportDescFieldNumber = 4;
    private string reportDesc_ = "";
    public string ReportDesc {
      get { return reportDesc_; }
      set {
        reportDesc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "report_level" field.</summary>
    public const int ReportLevelFieldNumber = 5;
    private int reportLevel_;
    public int ReportLevel {
      get { return reportLevel_; }
      set {
        reportLevel_ = value;
      }
    }

    /// <summary>Field number for the "report_sequence" field.</summary>
    public const int ReportSequenceFieldNumber = 6;
    private int reportSequence_;
    public int ReportSequence {
      get { return reportSequence_; }
      set {
        reportSequence_ = value;
      }
    }

    /// <summary>Field number for the "folder_sequence" field.</summary>
    public const int FolderSequenceFieldNumber = 7;
    private int folderSequence_;
    public int FolderSequence {
      get { return folderSequence_; }
      set {
        folderSequence_ = value;
      }
    }

    /// <summary>Field number for the "folders" field.</summary>
    public const int FoldersFieldNumber = 8;
    private static readonly pb::FieldCodec<global::MK6.MicroServices.ReportTemplates.ReportFolder> _repeated_folders_codec
        = pb::FieldCodec.ForMessage(66, global::MK6.MicroServices.ReportTemplates.ReportFolder.Parser);
    private readonly pbc::RepeatedField<global::MK6.MicroServices.ReportTemplates.ReportFolder> folders_ = new pbc::RepeatedField<global::MK6.MicroServices.ReportTemplates.ReportFolder>();
    public pbc::RepeatedField<global::MK6.MicroServices.ReportTemplates.ReportFolder> Folders {
      get { return folders_; }
    }

    public override bool Equals(object other) {
      return Equals(other as ReportFolder);
    }

    public bool Equals(ReportFolder other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Parent != other.Parent) return false;
      if (Report != other.Report) return false;
      if (ReportName != other.ReportName) return false;
      if (ReportDesc != other.ReportDesc) return false;
      if (ReportLevel != other.ReportLevel) return false;
      if (ReportSequence != other.ReportSequence) return false;
      if (FolderSequence != other.FolderSequence) return false;
      if(!folders_.Equals(other.folders_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Parent != 0) hash ^= Parent.GetHashCode();
      if (Report != 0) hash ^= Report.GetHashCode();
      if (ReportName.Length != 0) hash ^= ReportName.GetHashCode();
      if (ReportDesc.Length != 0) hash ^= ReportDesc.GetHashCode();
      if (ReportLevel != 0) hash ^= ReportLevel.GetHashCode();
      if (ReportSequence != 0) hash ^= ReportSequence.GetHashCode();
      if (FolderSequence != 0) hash ^= FolderSequence.GetHashCode();
      hash ^= folders_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Parent != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Parent);
      }
      if (Report != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Report);
      }
      if (ReportName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ReportName);
      }
      if (ReportDesc.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ReportDesc);
      }
      if (ReportLevel != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ReportLevel);
      }
      if (ReportSequence != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ReportSequence);
      }
      if (FolderSequence != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(FolderSequence);
      }
      folders_.WriteTo(output, _repeated_folders_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Parent != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Parent);
      }
      if (Report != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Report);
      }
      if (ReportName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReportName);
      }
      if (ReportDesc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReportDesc);
      }
      if (ReportLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReportLevel);
      }
      if (ReportSequence != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReportSequence);
      }
      if (FolderSequence != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FolderSequence);
      }
      size += folders_.CalculateSize(_repeated_folders_codec);
      return size;
    }

    public void MergeFrom(ReportFolder other) {
      if (other == null) {
        return;
      }
      if (other.Parent != 0) {
        Parent = other.Parent;
      }
      if (other.Report != 0) {
        Report = other.Report;
      }
      if (other.ReportName.Length != 0) {
        ReportName = other.ReportName;
      }
      if (other.ReportDesc.Length != 0) {
        ReportDesc = other.ReportDesc;
      }
      if (other.ReportLevel != 0) {
        ReportLevel = other.ReportLevel;
      }
      if (other.ReportSequence != 0) {
        ReportSequence = other.ReportSequence;
      }
      if (other.FolderSequence != 0) {
        FolderSequence = other.FolderSequence;
      }
      folders_.Add(other.folders_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Parent = input.ReadInt32();
            break;
          }
          case 16: {
            Report = input.ReadInt32();
            break;
          }
          case 26: {
            ReportName = input.ReadString();
            break;
          }
          case 34: {
            ReportDesc = input.ReadString();
            break;
          }
          case 40: {
            ReportLevel = input.ReadInt32();
            break;
          }
          case 48: {
            ReportSequence = input.ReadInt32();
            break;
          }
          case 56: {
            FolderSequence = input.ReadInt32();
            break;
          }
          case 66: {
            folders_.AddEntriesFrom(input, _repeated_folders_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ReportLevelRequest : pb::IMessage<ReportLevelRequest> {
    private static readonly pb::MessageParser<ReportLevelRequest> _parser = new pb::MessageParser<ReportLevelRequest>(() => new ReportLevelRequest());
    public static pb::MessageParser<ReportLevelRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::MK6.MicroServices.ReportTemplates.MessagesReflection.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public ReportLevelRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ReportLevelRequest(ReportLevelRequest other) : this() {
    }

    public ReportLevelRequest Clone() {
      return new ReportLevelRequest(this);
    }

    public override bool Equals(object other) {
      return Equals(other as ReportLevelRequest);
    }

    public bool Equals(ReportLevelRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(ReportLevelRequest other) {
      if (other == null) {
        return;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ReportLevel : pb::IMessage<ReportLevel> {
    private static readonly pb::MessageParser<ReportLevel> _parser = new pb::MessageParser<ReportLevel>(() => new ReportLevel());
    public static pb::MessageParser<ReportLevel> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::MK6.MicroServices.ReportTemplates.MessagesReflection.Descriptor.MessageTypes[2]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public ReportLevel() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ReportLevel(ReportLevel other) : this() {
      level_ = other.level_;
      description_ = other.description_;
      folders_ = other.folders_.Clone();
    }

    public ReportLevel Clone() {
      return new ReportLevel(this);
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 1;
    private int level_;
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 2;
    private string description_ = "";
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "folders" field.</summary>
    public const int FoldersFieldNumber = 3;
    private static readonly pb::FieldCodec<global::MK6.MicroServices.ReportTemplates.ReportFolder> _repeated_folders_codec
        = pb::FieldCodec.ForMessage(26, global::MK6.MicroServices.ReportTemplates.ReportFolder.Parser);
    private readonly pbc::RepeatedField<global::MK6.MicroServices.ReportTemplates.ReportFolder> folders_ = new pbc::RepeatedField<global::MK6.MicroServices.ReportTemplates.ReportFolder>();
    public pbc::RepeatedField<global::MK6.MicroServices.ReportTemplates.ReportFolder> Folders {
      get { return folders_; }
    }

    public override bool Equals(object other) {
      return Equals(other as ReportLevel);
    }

    public bool Equals(ReportLevel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Level != other.Level) return false;
      if (Description != other.Description) return false;
      if(!folders_.Equals(other.folders_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      hash ^= folders_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Level);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Description);
      }
      folders_.WriteTo(output, _repeated_folders_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      size += folders_.CalculateSize(_repeated_folders_codec);
      return size;
    }

    public void MergeFrom(ReportLevel other) {
      if (other == null) {
        return;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      folders_.Add(other.folders_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Level = input.ReadInt32();
            break;
          }
          case 18: {
            Description = input.ReadString();
            break;
          }
          case 26: {
            folders_.AddEntriesFrom(input, _repeated_folders_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ReportFolderRequest : pb::IMessage<ReportFolderRequest> {
    private static readonly pb::MessageParser<ReportFolderRequest> _parser = new pb::MessageParser<ReportFolderRequest>(() => new ReportFolderRequest());
    public static pb::MessageParser<ReportFolderRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::MK6.MicroServices.ReportTemplates.MessagesReflection.Descriptor.MessageTypes[3]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public ReportFolderRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ReportFolderRequest(ReportFolderRequest other) : this() {
      groupIds_ = other.groupIds_.Clone();
    }

    public ReportFolderRequest Clone() {
      return new ReportFolderRequest(this);
    }

    /// <summary>Field number for the "group_ids" field.</summary>
    public const int GroupIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_groupIds_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> groupIds_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> GroupIds {
      get { return groupIds_; }
    }

    public override bool Equals(object other) {
      return Equals(other as ReportFolderRequest);
    }

    public bool Equals(ReportFolderRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!groupIds_.Equals(other.groupIds_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= groupIds_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      groupIds_.WriteTo(output, _repeated_groupIds_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += groupIds_.CalculateSize(_repeated_groupIds_codec);
      return size;
    }

    public void MergeFrom(ReportFolderRequest other) {
      if (other == null) {
        return;
      }
      groupIds_.Add(other.groupIds_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            groupIds_.AddEntriesFrom(input, _repeated_groupIds_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
