// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace MK6.MicroServices.ReportTemplates {
  public static class ReportTemplateService
  {
    static readonly string __ServiceName = "MK6.MicroServices.ReportTemplates.ReportTemplateService";

    static readonly Marshaller<global::MK6.MicroServices.ReportTemplates.ReportFolderRequest> __Marshaller_ReportFolderRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::MK6.MicroServices.ReportTemplates.ReportFolderRequest.Parser.ParseFrom);
    static readonly Marshaller<global::MK6.MicroServices.ReportTemplates.ReportFolder> __Marshaller_ReportFolder = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::MK6.MicroServices.ReportTemplates.ReportFolder.Parser.ParseFrom);

    static readonly Method<global::MK6.MicroServices.ReportTemplates.ReportFolderRequest, global::MK6.MicroServices.ReportTemplates.ReportFolder> __Method_GetReportFolders = new Method<global::MK6.MicroServices.ReportTemplates.ReportFolderRequest, global::MK6.MicroServices.ReportTemplates.ReportFolder>(
        MethodType.ServerStreaming,
        __ServiceName,
        "GetReportFolders",
        __Marshaller_ReportFolderRequest,
        __Marshaller_ReportFolder);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::MK6.MicroServices.ReportTemplates.ServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ReportTemplateService</summary>
    public abstract class ReportTemplateServiceBase
    {
      public virtual global::System.Threading.Tasks.Task GetReportFolders(global::MK6.MicroServices.ReportTemplates.ReportFolderRequest request, IServerStreamWriter<global::MK6.MicroServices.ReportTemplates.ReportFolder> responseStream, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ReportTemplateService</summary>
    public class ReportTemplateServiceClient : ClientBase<ReportTemplateServiceClient>
    {
      /// <summary>Creates a new client for ReportTemplateService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ReportTemplateServiceClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ReportTemplateService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ReportTemplateServiceClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ReportTemplateServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ReportTemplateServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual AsyncServerStreamingCall<global::MK6.MicroServices.ReportTemplates.ReportFolder> GetReportFolders(global::MK6.MicroServices.ReportTemplates.ReportFolderRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetReportFolders(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncServerStreamingCall<global::MK6.MicroServices.ReportTemplates.ReportFolder> GetReportFolders(global::MK6.MicroServices.ReportTemplates.ReportFolderRequest request, CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetReportFolders, null, options, request);
      }
      protected override ReportTemplateServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ReportTemplateServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(ReportTemplateServiceBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetReportFolders, serviceImpl.GetReportFolders).Build();
    }

  }
}
#endregion
